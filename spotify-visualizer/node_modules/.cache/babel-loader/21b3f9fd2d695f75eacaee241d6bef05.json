{"ast":null,"code":"import _classCallCheck from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\src\\\\views\\\\Home.js\";\n\n/**\r\n * Creating a home page, that should be fully static (pending state changes to the callback and login uris)\r\n * Just using another view page to implement within a router in App.js\r\n */\nimport React, { Component } from 'react';\nimport './css/Home.css'; //import css for this web page\n\nrequire('dotenv').config(); //authentication url\n\n\nvar AUTH_URL = process.env.AUTH_URL;\n/**\r\n * This function takes a Spotify User Access Token (which is generated automatically via the OAuth flow) and then creates an API call to Spotify's Connect API to get the user's playback state\r\n * @name getUserPlaybackState\r\n * @param {string} input an access token\r\n * @returns {JSON} returns a JSON object of the user's playback state\r\n */\n\nfunction getUserPlaybackState(access_token) {}\n/**\r\n * SongTitle just passes the properties given to it by the Player main component and displays it\r\n */\n\n\nvar SongTitle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SongTitle, _Component);\n\n  function SongTitle() {\n    _classCallCheck(this, SongTitle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SongTitle).apply(this, arguments));\n  }\n\n  _createClass(SongTitle, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"song-title col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"start-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, this.props.song.name), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, this.props.song.artist));\n    }\n  }]);\n\n  return SongTitle;\n}(Component);\n/**\r\n * Progress bar, re-renders this progress bar \r\n */\n\n\nvar Progress =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Progress, _Component2);\n\n  function Progress() {\n    _classCallCheck(this, Progress);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Progress).apply(this, arguments));\n  }\n\n  _createClass(Progress, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"get_started col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"start_btn btn-sm btn-success\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Connect To Spotify\"));\n    }\n  }]);\n\n  return Progress;\n}(Component);\n/**\r\n * this local class \"Title\" just takes a small button containing div, and the button itself to turn it \r\n * into a component usable within my main Home component\r\n */\n\n\nvar Title =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(Title, _Component3);\n\n  function Title() {\n    _classCallCheck(this, Title);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Title).apply(this, arguments));\n  }\n\n  _createClass(Title, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"title col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"start-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \" Spotify Music Visualizer \"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" Connect Your Spotify Account to Continue \"));\n    }\n  }]);\n\n  return Title;\n}(Component);\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(Button, _Component4);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"get_started col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"start_btn btn-sm btn-success\",\n        href: \"http://localhost:8888/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Connect To Spotify\"));\n    }\n  }]);\n\n  return Button;\n}(Component);\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component5) {\n  _inherits(Home, _Component5);\n\n  function Home() {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this));\n    _this.state = {\n      serverData: {}\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        //arrow functions for async\n        _this2.setState({\n          serverData: testData\n        });\n      }, 2000); //run this 2 secs after components are mounted\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"contain col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.state.serverData ? //if serverData.song exists render the div below, else jump to the colon and render that\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(SongTitle, {\n        songName: this.state.serverData.song && this.state.serverData.song.name,\n        artist: this.state.serverData.song && this.state.serverData.song.artist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(Progress, {\n        duration: this.state.serverData.song && this.state.serverData.song.duration,\n        time: this.state.serverData.song && this.state.serverData.song.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"contain col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport { Home as default };","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\Home.js"],"names":["React","Component","require","config","AUTH_URL","process","env","getUserPlaybackState","access_token","SongTitle","props","song","name","artist","Progress","Title","Button","Home","state","serverData","setTimeout","setState","testData","duration","time"],"mappings":"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","sourcesContent":["/**\r\n * Creating a home page, that should be fully static (pending state changes to the callback and login uris)\r\n * Just using another view page to implement within a router in App.js\r\n */\r\nimport React, { Component } from 'react';\r\nimport './css/Home.css'; //import css for this web page\r\nrequire('dotenv').config();\r\n\r\n//authentication url\r\nconst AUTH_URL = process.env.AUTH_URL;\r\n/**\r\n * This function takes a Spotify User Access Token (which is generated automatically via the OAuth flow) and then creates an API call to Spotify's Connect API to get the user's playback state\r\n * @name getUserPlaybackState\r\n * @param {string} input an access token\r\n * @returns {JSON} returns a JSON object of the user's playback state\r\n */\r\nfunction getUserPlaybackState(access_token) {\r\n}\r\n/**\r\n * SongTitle just passes the properties given to it by the Player main component and displays it\r\n */\r\nclass SongTitle extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"song-title col-sm-12\">\r\n                <h1 id=\"start-title\">\r\n                    {this.props.song.name}\r\n                </h1>\r\n\r\n                <h3>\r\n                    {this.props.song.artist}\r\n                </h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Progress bar, re-renders this progress bar \r\n */\r\nclass Progress extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"get_started col-sm-12\">\r\n                <a className=\"start_btn btn-sm btn-success\" href=\"#\">Connect To Spotify</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * this local class \"Title\" just takes a small button containing div, and the button itself to turn it \r\n * into a component usable within my main Home component\r\n */\r\nclass Title extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"title col-sm-12\">\r\n                <h1 id=\"start-title\"> Spotify Music Visualizer </h1>\r\n                <h4> Connect Your Spotify Account to Continue </h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Button extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"get_started col-sm-12\">\r\n                <a className=\"start_btn btn-sm btn-success\" href=\"http://localhost:8888/login\">Connect To Spotify</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default class Home extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {serverData : {}}\r\n    }\r\n    componentDidMount() {\r\n        setTimeout(() => { //arrow functions for async\r\n        this.setState({serverData: testData});\r\n        }, 2000); //run this 2 secs after components are mounted\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contain col-sm-12\">\r\n            {this.state.serverData ? //if serverData.song exists render the div below, else jump to the colon and render that\r\n            <div>\r\n                <SongTitle songName={this.state.serverData.song &&\r\n                                    this.state.serverData.song.name}\r\n                        artist={this.state.serverData.song &&\r\n                                this.state.serverData.song.artist}/> \r\n                \r\n                <Progress duration={this.state.serverData.song &&\r\n                                    this.state.serverData.song.duration}\r\n                        time={this.state.serverData.song &&\r\n                                this.state.serverData.song.time}/>\r\n            </div> : \r\n            <div className=\"contain col-sm-12\">\r\n                <Title/>\r\n                <Button/>\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}