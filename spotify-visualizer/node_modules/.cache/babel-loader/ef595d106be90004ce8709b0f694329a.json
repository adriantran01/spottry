{"ast":null,"code":"import _classCallCheck from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\src\\\\views\\\\Home.js\";\n\n/**\r\n * Creating a home page, that should be fully static (pending state changes to the callback and login uris)\r\n * Just using another view page to implement within a router in App.js\r\n */\nimport React, { Component } from 'react';\nimport './css/Home.css'; //import css for this web page\n\nimport queryString from 'query-string';\n\nrequire('dotenv').config(); //authentication url\n\n\nvar AUTH_URL = process.env.AUTH_URL;\n/**\r\n * This function takes a Spotify User Access Token (which is generated automatically via the OAuth flow) and then creates an API call to Spotify's Connect API to get the user's playback state\r\n * @name getUserPlaybackState\r\n * @param {string} input an access token\r\n * @returns {JSON} returns a JSON object of the user's playback state\r\n */\n\nfunction getUserPlaybackState(access_token) {}\n/**\r\n * SongTitle just passes the properties given to it by the Player main component and displays it\r\n */\n\n\nvar SongTitle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SongTitle, _Component);\n\n  function SongTitle() {\n    _classCallCheck(this, SongTitle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SongTitle).apply(this, arguments));\n  }\n\n  _createClass(SongTitle, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"song-title col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"start-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.props.song.name), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, this.props.song.artist));\n    }\n  }]);\n\n  return SongTitle;\n}(Component);\n/**\r\n * Progress bar, re-renders this progress bar \r\n */\n\n\nvar Progress =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Progress, _Component2);\n\n  function Progress() {\n    _classCallCheck(this, Progress);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Progress).apply(this, arguments));\n  }\n\n  _createClass(Progress, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"get_started col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"start_btn btn-sm btn-success\",\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Connect To Spotify\"));\n    }\n  }]);\n\n  return Progress;\n}(Component);\n/**\r\n * this local class \"Title\" just takes a small button containing div, and the button itself to turn it \r\n * into a component usable within my main Home component\r\n */\n\n\nvar Title =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(Title, _Component3);\n\n  function Title() {\n    _classCallCheck(this, Title);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Title).apply(this, arguments));\n  }\n\n  _createClass(Title, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"title col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"start-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" Spotify Music Visualizer \"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \" Connect Your Spotify Account to Continue \"));\n    }\n  }]);\n\n  return Title;\n}(Component);\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(Button, _Component4);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"get_started col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"start_btn btn-sm btn-success\",\n        href: \"http://localhost:8888/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Connect To Spotify\"));\n    }\n  }]);\n\n  return Button;\n}(Component);\n/** Brief Explanation about what's happening here\r\n* <ol>\r\n* <li> I use a constructor to set a state for the data I will be accessing later. React requires that I call\r\n* a super inside my constructor before calling \"this\" onto itself\r\n* </li> <br>\r\n* \r\n* <li> componentDidMount() is a function that activates when the components are first rendered, then you set\r\n* the state of the component to the data you want\r\n* </li> <br>\r\n*\r\n* <li> Within my render, you will see <code>{this.state.serverData}</code> which renders into text, the && just checks if the data\r\n* exists or is undefined/null, then you render the data into it. (Truthy/falsy within JS)\r\n* </li> <br>\r\n*\r\n* <li>Wrapping my components within objects and then calling a boolean method upon them prevents them from rendering\r\n* if there has not yet been data provided via the API endpoint\r\n* </li> <br>\r\n* \r\n* <li> Truthy/falsy logic then renders (redirects) user to the <code>login</code> screen if there is no server data available (i.e. they aren't logged in)\r\n* </ol>\r\n*/\n\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component5) {\n  _inherits(Home, _Component5);\n\n  function Home() {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this));\n    _this.state = {\n      serverData: {}\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      /**\r\n       * @name parsedToken\r\n       * @param {string} window.location.search\r\n       * @returns {string} a formmated query string (access token)\r\n       * \r\n       * takes the returned access token an user gives from the auth flow and returns an access token (completely parsed and encoded)\r\n       */\n      var parsed = queryString.parse(window.location.search);\n      console.log(parsed);\n      var accessToken = parsed.access_token;\n      console.log(accessToken);\n      /**\r\n       * @name fetchData\r\n       * @param {endpoint, object-literal, header}\r\n       * @returns a JSON array/file of data\r\n       * \r\n       * the header includes the <code>access token</code> which was fetched earlier in the <code>queryString.parse</code> function\r\n       */\n\n      fetch('https://api.spotify.com/v1/me/player', {\n        headers: {\n          'Authorization': 'Bearer' + accessToken\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"contain col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.serverData.song ? //if serverData.song exists render the div below, else jump to the colon and render that\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(SongTitle, {\n        songName: this.state.serverData.song && this.state.serverData.song.name,\n        artist: this.state.serverData.song && this.state.serverData.song.artist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(Progress, {\n        duration: this.state.serverData.song && this.state.serverData.song.duration,\n        time: this.state.serverData.song && this.state.serverData.song.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport { Home as default };","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\Home.js"],"names":["React","Component","queryString","require","config","AUTH_URL","process","env","getUserPlaybackState","access_token","SongTitle","props","song","name","artist","Progress","Title","Button","Home","state","serverData","parsed","parse","window","location","search","console","log","accessToken","fetch","headers","duration","time"],"mappings":"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","sourcesContent":["/**\r\n * Creating a home page, that should be fully static (pending state changes to the callback and login uris)\r\n * Just using another view page to implement within a router in App.js\r\n */\r\nimport React, { Component } from 'react';\r\nimport './css/Home.css'; //import css for this web page\r\nimport queryString from 'query-string';\r\nrequire('dotenv').config();\r\n\r\n//authentication url\r\nconst AUTH_URL = process.env.AUTH_URL;\r\n/**\r\n * This function takes a Spotify User Access Token (which is generated automatically via the OAuth flow) and then creates an API call to Spotify's Connect API to get the user's playback state\r\n * @name getUserPlaybackState\r\n * @param {string} input an access token\r\n * @returns {JSON} returns a JSON object of the user's playback state\r\n */\r\nfunction getUserPlaybackState(access_token) {\r\n}\r\n/**\r\n * SongTitle just passes the properties given to it by the Player main component and displays it\r\n */\r\nclass SongTitle extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"song-title col-sm-12\">\r\n                <h1 id=\"start-title\">\r\n                    {this.props.song.name}\r\n                </h1>\r\n\r\n                <h3>\r\n                    {this.props.song.artist}\r\n                </h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Progress bar, re-renders this progress bar \r\n */\r\nclass Progress extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"get_started col-sm-12\">\r\n                <a className=\"start_btn btn-sm btn-success\" href=\"#\">Connect To Spotify</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * this local class \"Title\" just takes a small button containing div, and the button itself to turn it \r\n * into a component usable within my main Home component\r\n */\r\nclass Title extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"title col-sm-12\">\r\n                <h1 id=\"start-title\"> Spotify Music Visualizer </h1>\r\n                <h4> Connect Your Spotify Account to Continue </h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Button extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"get_started col-sm-12\">\r\n                <a className=\"start_btn btn-sm btn-success\" href=\"http://localhost:8888/login\">Connect To Spotify</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/** Brief Explanation about what's happening here\r\n* <ol>\r\n* <li> I use a constructor to set a state for the data I will be accessing later. React requires that I call\r\n* a super inside my constructor before calling \"this\" onto itself\r\n* </li> <br>\r\n* \r\n* <li> componentDidMount() is a function that activates when the components are first rendered, then you set\r\n* the state of the component to the data you want\r\n* </li> <br>\r\n*\r\n* <li> Within my render, you will see <code>{this.state.serverData}</code> which renders into text, the && just checks if the data\r\n* exists or is undefined/null, then you render the data into it. (Truthy/falsy within JS)\r\n* </li> <br>\r\n*\r\n* <li>Wrapping my components within objects and then calling a boolean method upon them prevents them from rendering\r\n* if there has not yet been data provided via the API endpoint\r\n* </li> <br>\r\n* \r\n* <li> Truthy/falsy logic then renders (redirects) user to the <code>login</code> screen if there is no server data available (i.e. they aren't logged in)\r\n* </ol>\r\n*/\r\nexport default class Home extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            serverData : {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        /**\r\n         * @name parsedToken\r\n         * @param {string} window.location.search\r\n         * @returns {string} a formmated query string (access token)\r\n         * \r\n         * takes the returned access token an user gives from the auth flow and returns an access token (completely parsed and encoded)\r\n         */\r\n        let parsed = queryString.parse(window.location.search);\r\n        console.log(parsed);\r\n        let accessToken = parsed.access_token;\r\n        console.log(accessToken);\r\n\r\n        /**\r\n         * @name fetchData\r\n         * @param {endpoint, object-literal, header}\r\n         * @returns a JSON array/file of data\r\n         * \r\n         * the header includes the <code>access token</code> which was fetched earlier in the <code>queryString.parse</code> function\r\n         */\r\n\r\n         fetch('https://api.spotify.com/v1/me/player', {\r\n             headers: {'Authorization': 'Bearer' + accessToken}\r\n         })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contain col-sm-12\">\r\n            {this.state.serverData.song ? //if serverData.song exists render the div below, else jump to the colon and render that\r\n            <div>\r\n                <SongTitle songName={this.state.serverData.song &&\r\n                                    this.state.serverData.song.name}\r\n                        artist={this.state.serverData.song &&\r\n                                this.state.serverData.song.artist}/> \r\n                \r\n                <Progress duration={this.state.serverData.song &&\r\n                                    this.state.serverData.song.duration}\r\n                        time={this.state.serverData.song &&\r\n                                this.state.serverData.song.time}/>\r\n            </div> : \r\n            <div >\r\n                <Title/>\r\n                <Button/>\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}