{"ast":null,"code":"export default function sketch(p) {\n  var analysis = {};\n  var features = {};\n  var diameter;\n  var test = {\n    \"BPM\": 100\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\n    p.colorMode(p.HSB, 360, 100, 100);\n    p.noStroke();\n    p.ellipseMode(p.RADIUS);\n    p.frameRate(600);\n  };\n  /**\r\n   * draw function should take the audio analysis\r\n   * on every half beat (tatum) change circle radius\r\n   * have like a mild gradient from last radius to current radius \r\n   * change circle colour every beat\r\n   * change size according to volume\r\n   * beat circle to tempo from API\r\n   */\n\n\n  p.draw = function () {\n    p.clear();\n    var r = p.millis() / (1000 / (test.BPM / 60.0));\n    r -= p.int(r);\n    diameter = p.map(r, 0, 2.5, 400, 0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\n\n    console.log(diameter); // *slightly* slow down the seizure-inducing radial gradient effects\n\n    for (var i = 0; i < 7; i++) {\n      p.drawGradient(p.windowWidth / 2, p.windowHeight / 2);\n    }\n  };\n\n  p.getR = function (props) {\n    return props.tempo;\n  };\n\n  p.getDanceability = function (props) {\n    return props.danceability;\n  }; //makes it look like a speaker driver bouncing around in a weird way\n\n\n  p.drawGradient = function (x, y) {\n    var radius = diameter / 2;\n    var randColor = p.random(0, 360);\n\n    for (var r = radius; r > 0; --r) {\n      p.fill(200, randColor, 120); //blue\n\n      p.ellipse(x, y, r, r);\n      randColor = (randColor + 1) % 69; //tried random numbers until it looked good\n    }\n  };\n}","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\js\\sketch.js"],"names":["sketch","p","analysis","features","diameter","test","setup","createCanvas","windowWidth","windowHeight","P2D","colorMode","HSB","noStroke","ellipseMode","RADIUS","frameRate","draw","clear","r","millis","BPM","int","map","console","log","i","drawGradient","getR","props","tempo","getDanceability","danceability","x","y","radius","randColor","random","fill","ellipse"],"mappings":"AAAA,eAAe,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AAElC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAJ;AAEA,MAAMC,IAAI,GAAG;AACT,WAAO;AADE,GAAb;;AAIAJ,EAAAA,CAAC,CAACK,KAAF,GAAU,YAAW;AACjBL,IAAAA,CAAC,CAACM,YAAF,CAAeN,CAAC,CAACO,WAAjB,EAA8BP,CAAC,CAACQ,YAAhC,EAA8CR,CAAC,CAACS,GAAhD;AACAT,IAAAA,CAAC,CAACU,SAAF,CAAYV,CAAC,CAACW,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B;AACAX,IAAAA,CAAC,CAACY,QAAF;AACAZ,IAAAA,CAAC,CAACa,WAAF,CAAcb,CAAC,CAACc,MAAhB;AACAd,IAAAA,CAAC,CAACe,SAAF,CAAY,GAAZ;AACH,GAND;AASA;;;;;;;;;;AAQAf,EAAAA,CAAC,CAACgB,IAAF,GAAS,YAAW;AAChBhB,IAAAA,CAAC,CAACiB,KAAF;AACA,QAAIC,CAAC,GAAGlB,CAAC,CAACmB,MAAF,MAAc,QAAQf,IAAI,CAACgB,GAAL,GAAW,IAAnB,CAAd,CAAR;AACAF,IAAAA,CAAC,IAAIlB,CAAC,CAACqB,GAAF,CAAMH,CAAN,CAAL;AACAf,IAAAA,QAAQ,GAAGH,CAAC,CAACsB,GAAF,CAAMJ,CAAN,EAAQ,CAAR,EAAU,GAAV,EAAc,GAAd,EAAkB,CAAlB,CAAX,CAJgB,CAIiB;;AACjCK,IAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAZ,EALgB,CAMhB;;AACA,SAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBzB,MAAAA,CAAC,CAAC0B,YAAF,CAAe1B,CAAC,CAACO,WAAF,GAAc,CAA7B,EAAgCP,CAAC,CAACQ,YAAF,GAAe,CAA/C;AACH;AACJ,GAVD;;AAYAR,EAAAA,CAAC,CAAC2B,IAAF,GAAS,UAASC,KAAT,EAAgB;AACrB,WAAOA,KAAK,CAACC,KAAb;AACH,GAFD;;AAIA7B,EAAAA,CAAC,CAAC8B,eAAF,GAAoB,UAASF,KAAT,EAAgB;AAChC,WAAOA,KAAK,CAACG,YAAb;AACH,GAFD,CA3CkC,CA+ClC;;;AACA/B,EAAAA,CAAC,CAAC0B,YAAF,GAAiB,UAASM,CAAT,EAAYC,CAAZ,EAAe;AAC5B,QAAIC,MAAM,GAAG/B,QAAQ,GAAG,CAAxB;AACA,QAAIgC,SAAS,GAAGnC,CAAC,CAACoC,MAAF,CAAS,CAAT,EAAY,GAAZ,CAAhB;;AACA,SAAK,IAAIlB,CAAC,GAAGgB,MAAb,EAAqBhB,CAAC,GAAG,CAAzB,EAA4B,EAAEA,CAA9B,EAAiC;AAC7BlB,MAAAA,CAAC,CAACqC,IAAF,CAAO,GAAP,EAAYF,SAAZ,EAAuB,GAAvB,EAD6B,CACA;;AAC7BnC,MAAAA,CAAC,CAACsC,OAAF,CAAUN,CAAV,EAAaC,CAAb,EAAgBf,CAAhB,EAAmBA,CAAnB;AACAiB,MAAAA,SAAS,GAAG,CAACA,SAAS,GAAG,CAAb,IAAkB,EAA9B,CAH6B,CAGK;AACjC;AACJ,GARL;AASC","sourcesContent":["export default function sketch(p) {\r\n\r\nlet analysis = {};\r\nlet features = {};\r\nvar diameter;\r\n\r\nconst test = {\r\n    \"BPM\": 100,\r\n}\r\n\r\np.setup = function() {\r\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\r\n    p.colorMode(p.HSB, 360, 100, 100);\r\n    p.noStroke();\r\n    p.ellipseMode(p.RADIUS);\r\n    p.frameRate(600);\r\n}\r\n\r\n\r\n/**\r\n * draw function should take the audio analysis\r\n * on every half beat (tatum) change circle radius\r\n * have like a mild gradient from last radius to current radius \r\n * change circle colour every beat\r\n * change size according to volume\r\n * beat circle to tempo from API\r\n */\r\np.draw = function() {\r\n    p.clear();\r\n    var r = p.millis() / (1000 / (test.BPM / 60.0));\r\n    r -= p.int(r);\r\n    diameter = p.map(r,0,2.5,400,0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\r\n    console.log(diameter)\r\n    // *slightly* slow down the seizure-inducing radial gradient effects\r\n    for (var i = 0; i < 7; i++) {\r\n        p.drawGradient(p.windowWidth/2, p.windowHeight/2)    \r\n    }\r\n}\r\n\r\np.getR = function(props) {\r\n    return props.tempo\r\n}\r\n\r\np.getDanceability = function(props) {\r\n    return props.danceability\r\n}\r\n\r\n//makes it look like a speaker driver bouncing around in a weird way\r\np.drawGradient = function(x, y) {\r\n    var radius = diameter / 2;\r\n    var randColor = p.random(0, 360);\r\n    for (var r = radius; r > 0; --r) {\r\n        p.fill(200, randColor, 120); //blue\r\n        p.ellipse(x, y, r, r);\r\n        randColor = (randColor + 1) % 69; //tried random numbers until it looked good\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}