{"ast":null,"code":"export default function sketch(p) {\n  function fetchData(accessToken) {\n    var _this = this;\n\n    var id;\n    fetch('https://api.spotify.com/v1/me/player', {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(data);\n      console.log(data.item.id);\n      id = data.item.id;\n      console.log(_this.state);\n      console.log(_this.state.song);\n    });\n    return id;\n  }\n\n  function getURLParams(req) {\n    var uri = window.location.href;\n    var url = new URL(uri);\n    var res = url.searchParams.get(req);\n    return res;\n  }\n\n  console.log(fetchData(getURLParams(\"access_token\")));\n  var analysis = {};\n  var features = {};\n  var diameter;\n  var test = {\n    \"BPM\": 100\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\n    p.colorMode(p.HSB, 360, 100, 100);\n    p.noStroke();\n    p.ellipseMode(p.RADIUS);\n    p.frameRate(600);\n  };\n  /**\r\n   * draw function should take the audio analysis\r\n   * on every half beat (tatum) change circle radius\r\n   * have like a mild gradient from last radius to current radius \r\n   * change circle colour every beat\r\n   * change size according to volume\r\n   * beat circle to tempo from API\r\n   */\n\n\n  p.draw = function () {\n    p.clear();\n    var r = p.millis() / (1000 / (test.BPM / 60.0));\n    r -= p.int(r);\n    diameter = p.map(r, 0, 2.5, 400, 0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\n\n    console.log(diameter); // *slightly* slow down the seizure-inducing radial gradient effects\n\n    for (var i = 0; i < 7; i++) {\n      p.drawGradient(p.windowWidth / 2, p.windowHeight / 2);\n    }\n  };\n\n  p.getR = function (props) {\n    return props.tempo;\n  };\n\n  p.getDanceability = function (props) {\n    return props.danceability;\n  }; //makes it look like a speaker driver bouncing around in a weird way\n\n\n  p.drawGradient = function (x, y) {\n    var radius = diameter / 2;\n    var randColor = p.random(0, 360);\n\n    for (var r = radius; r > 0; --r) {\n      p.fill(200, randColor, 120); //blue\n\n      p.ellipse(x, y, r, r);\n      randColor = (randColor + 1) % 69; //tried random numbers until it looked good\n    }\n  };\n}","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\js\\sketch.js"],"names":["sketch","p","fetchData","accessToken","id","fetch","headers","then","response","json","data","console","log","item","state","song","getURLParams","req","uri","window","location","href","url","URL","res","searchParams","get","analysis","features","diameter","test","setup","createCanvas","windowWidth","windowHeight","P2D","colorMode","HSB","noStroke","ellipseMode","RADIUS","frameRate","draw","clear","r","millis","BPM","int","map","i","drawGradient","getR","props","tempo","getDanceability","danceability","x","y","radius","randColor","random","fill","ellipse"],"mappings":"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","sourcesContent":["export default function sketch(p) {\r\n\r\n    function fetchData(accessToken) {\r\n        let id;\r\n        fetch('https://api.spotify.com/v1/me/player', {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + accessToken}\r\n                    }).then(response => response.json()).then(data => {\r\n                            console.log(data);\r\n                            console.log(data.item.id)\r\n                            id = data.item.id\r\n                        console.log(this.state);\r\n                        console.log(this.state.song);\r\n                    })\r\n                    return id;\r\n        }    \r\n\r\n    function getURLParams(req) {\r\n        var uri = window.location.href;\r\n        var url = new URL(uri);\r\n        var res = url.searchParams.get(req);\r\n        return res\r\n    }\r\nconsole.log(fetchData(getURLParams(\"access_token\")))\r\n\r\nlet analysis = {};\r\nlet features = {};\r\nvar diameter;\r\n\r\nconst test = {\r\n    \"BPM\": 100,\r\n}\r\n\r\np.setup = function() {\r\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\r\n    p.colorMode(p.HSB, 360, 100, 100);\r\n    p.noStroke();\r\n    p.ellipseMode(p.RADIUS);\r\n    p.frameRate(600);\r\n}\r\n\r\n\r\n/**\r\n * draw function should take the audio analysis\r\n * on every half beat (tatum) change circle radius\r\n * have like a mild gradient from last radius to current radius \r\n * change circle colour every beat\r\n * change size according to volume\r\n * beat circle to tempo from API\r\n */\r\np.draw = function() {\r\n    p.clear();\r\n    var r = p.millis() / (1000 / (test.BPM / 60.0));\r\n    r -= p.int(r);\r\n    diameter = p.map(r,0,2.5,400,0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\r\n    console.log(diameter)\r\n    // *slightly* slow down the seizure-inducing radial gradient effects\r\n    for (var i = 0; i < 7; i++) {\r\n        p.drawGradient(p.windowWidth/2, p.windowHeight/2)    \r\n    }\r\n}\r\n\r\np.getR = function(props) {\r\n    return props.tempo\r\n}\r\n\r\np.getDanceability = function(props) {\r\n    return props.danceability\r\n}\r\n\r\n//makes it look like a speaker driver bouncing around in a weird way\r\np.drawGradient = function(x, y) {\r\n    var radius = diameter / 2;\r\n    var randColor = p.random(0, 360);\r\n    for (var r = radius; r > 0; --r) {\r\n        p.fill(200, randColor, 120); //blue\r\n        p.ellipse(x, y, r, r);\r\n        randColor = (randColor + 1) % 69; //tried random numbers until it looked good\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}