{"ast":null,"code":"export default function sketch(p) {\n  var analysis = {};\n  var features = {};\n  var diameter; //vars for animation demoing\n\n  var firstSizeIncrement, smoothing, fragment;\n  var test = {\n    \"BPM\": 60\n  };\n\n  p.setup = function () {\n    p.createCanvas(windowWidth, windowHeight, p.WEBGL);\n    p.colorMode(HSB, 360, 100, 100);\n    p.noStroke();\n    p.ellipseMode(RADIUS);\n    p.frameRate(60);\n  };\n  /**\r\n   * draw function should take the audio analysis\r\n   * on every half beat (tatum) change circle radius\r\n   * have like a mild gradient from last radius to current radius \r\n   * change circle colour every beat\r\n   * change size according to volume\r\n   * beat circle to tempo from API\r\n   */\n\n\n  p.draw = function () {\n    var r = millis() / (1000 / (getR() / 60.0));\n    r -= int(r);\n    diameter = map(r, 0, 2.5, 400, 0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\n\n    console.log(diameter);\n    p.background(\"#eeeeee\"); // *slightly* slow down the seizure-inducing radial gradient effects\n\n    for (var i = 0; i < 7; i++) {\n      p.drawGradient(windowWidth / 2, windowHeight / 2);\n    }\n  };\n\n  p.getR = function () {\n    return props.tempo;\n  };\n\n  p.getDanceability = function () {\n    return props.danceability;\n  }; //makes it look like a speaker driver bouncing around in a weird way\n\n\n  p.drawGradient - function (props) {\n    var radius = diameter / 2;\n    var randColor = random(0, 360);\n\n    for (var r = radius; r > 0; --r) {\n      p.fill(200, randColor, 120); //blue\n\n      p.ellipse(x, y, r, r);\n      randColor = (randColor + 1) % 69; //tried random numbers until it looked good\n    }\n  };\n}","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\js\\sketch.js"],"names":["sketch","p","analysis","features","diameter","firstSizeIncrement","smoothing","fragment","test","setup","createCanvas","windowWidth","windowHeight","WEBGL","colorMode","HSB","noStroke","ellipseMode","RADIUS","frameRate","draw","r","millis","getR","int","map","console","log","background","i","drawGradient","props","tempo","getDanceability","danceability","radius","randColor","random","fill","ellipse","x","y"],"mappings":"AAAA,eAAe,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AAElC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAJ,CAJkC,CAMlC;;AACA,MAAIC,kBAAJ,EAAwBC,SAAxB,EAAmCC,QAAnC;AACA,MAAMC,IAAI,GAAG;AACT,WAAO;AADE,GAAb;;AAIAP,EAAAA,CAAC,CAACQ,KAAF,GAAU,YAAW;AACjBR,IAAAA,CAAC,CAACS,YAAF,CAAeC,WAAf,EAA4BC,YAA5B,EAA0CX,CAAC,CAACY,KAA5C;AACAZ,IAAAA,CAAC,CAACa,SAAF,CAAYC,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B;AACAd,IAAAA,CAAC,CAACe,QAAF;AACAf,IAAAA,CAAC,CAACgB,WAAF,CAAcC,MAAd;AACAjB,IAAAA,CAAC,CAACkB,SAAF,CAAY,EAAZ;AACH,GAND;AASA;;;;;;;;;;AAQAlB,EAAAA,CAAC,CAACmB,IAAF,GAAS,YAAW;AAChB,QAAIC,CAAC,GAAGC,MAAM,MAAM,QAAQC,IAAI,KAAK,IAAjB,CAAN,CAAd;AACAF,IAAAA,CAAC,IAAIG,GAAG,CAACH,CAAD,CAAR;AACAjB,IAAAA,QAAQ,GAAGqB,GAAG,CAACJ,CAAD,EAAG,CAAH,EAAK,GAAL,EAAS,GAAT,EAAa,CAAb,CAAd,CAHgB,CAGe;;AAC/BK,IAAAA,OAAO,CAACC,GAAR,CAAYvB,QAAZ;AACAH,IAAAA,CAAC,CAAC2B,UAAF,CAAa,SAAb,EALgB,CAMhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB5B,MAAAA,CAAC,CAAC6B,YAAF,CAAenB,WAAW,GAAC,CAA3B,EAA8BC,YAAY,GAAC,CAA3C;AACH;AACJ,GAVD;;AAYAX,EAAAA,CAAC,CAACsB,IAAF,GAAS,YAAW;AAChB,WAAOQ,KAAK,CAACC,KAAb;AACH,GAFD;;AAIA/B,EAAAA,CAAC,CAACgC,eAAF,GAAoB,YAAW;AAC3B,WAAOF,KAAK,CAACG,YAAb;AACH,GAFD,CA7CkC,CAiDlC;;;AACAjC,EAAAA,CAAC,CAAC6B,YAAF,GAAiB,UAASC,KAAT,EAAgB;AAC7B,QAAII,MAAM,GAAG/B,QAAQ,GAAG,CAAxB;AACA,QAAIgC,SAAS,GAAGC,MAAM,CAAC,CAAD,EAAI,GAAJ,CAAtB;;AACA,SAAK,IAAIhB,CAAC,GAAGc,MAAb,EAAqBd,CAAC,GAAG,CAAzB,EAA4B,EAAEA,CAA9B,EAAiC;AAC7BpB,MAAAA,CAAC,CAACqC,IAAF,CAAO,GAAP,EAAYF,SAAZ,EAAuB,GAAvB,EAD6B,CACA;;AAC7BnC,MAAAA,CAAC,CAACsC,OAAF,CAAUC,CAAV,EAAaC,CAAb,EAAgBpB,CAAhB,EAAmBA,CAAnB;AACAe,MAAAA,SAAS,GAAG,CAACA,SAAS,GAAG,CAAb,IAAkB,EAA9B,CAH6B,CAGK;AACjC;AACJ,GARL;AASC","sourcesContent":["export default function sketch(p) {\r\n\r\nlet analysis = {};\r\nlet features = {};\r\nvar diameter;\r\n\r\n//vars for animation demoing\r\nlet firstSizeIncrement, smoothing, fragment;\r\nconst test = {\r\n    \"BPM\": 60,\r\n}\r\n\r\np.setup = function() {\r\n    p.createCanvas(windowWidth, windowHeight, p.WEBGL);\r\n    p.colorMode(HSB, 360, 100, 100);\r\n    p.noStroke();\r\n    p.ellipseMode(RADIUS);\r\n    p.frameRate(60);\r\n}\r\n\r\n\r\n/**\r\n * draw function should take the audio analysis\r\n * on every half beat (tatum) change circle radius\r\n * have like a mild gradient from last radius to current radius \r\n * change circle colour every beat\r\n * change size according to volume\r\n * beat circle to tempo from API\r\n */\r\np.draw = function() {\r\n    var r = millis() / (1000 / (getR() / 60.0));\r\n    r -= int(r);\r\n    diameter = map(r,0,2.5,400,0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\r\n    console.log(diameter)\r\n    p.background(\"#eeeeee\");\r\n    // *slightly* slow down the seizure-inducing radial gradient effects\r\n    for (var i = 0; i < 7; i++) {\r\n        p.drawGradient(windowWidth/2, windowHeight/2)    \r\n    }\r\n}\r\n\r\np.getR = function() {\r\n    return props.tempo\r\n}\r\n\r\np.getDanceability = function() {\r\n    return props.danceability\r\n}\r\n\r\n//makes it look like a speaker driver bouncing around in a weird way\r\np.drawGradient - function(props) {\r\n    var radius = diameter / 2;\r\n    var randColor = random(0, 360);\r\n    for (var r = radius; r > 0; --r) {\r\n        p.fill(200, randColor, 120); //blue\r\n        p.ellipse(x, y, r, r);\r\n        randColor = (randColor + 1) % 69; //tried random numbers until it looked good\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}