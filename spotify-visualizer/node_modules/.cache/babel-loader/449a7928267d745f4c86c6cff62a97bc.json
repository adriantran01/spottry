{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @name P5Sketch\r\n * @returns a sketch script that <code>P5Wrapper.js</code> will run\r\n * \r\n */\nexport default function sketch(p) {\n  /**\r\n   * @name fetchData\r\n   * @param {string} accessToken Takes an <code>accessToken</code> as a parameter\r\n   * @returns {id} User's Currently Playing data from the Spotify API\r\n   * This function is using an asychronous operation\r\n   * a <code>promise</code> is made -> it can either be resolved or rejected\r\n   * If error (reject) then you <code>catch</code> the error and return it\r\n   * If the code within the try/catch is successful, then you return the id of the song currently playing\r\n   * \r\n   * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n   */\n  function fetchData(accessToken) {\n    return new Promise(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(resolve, reject) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch('https://api.spotify.com/v1/me/player', {\n                  headers: {\n                    'Authorization': 'Bearer ' + accessToken\n                  }\n                }).then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  var id = data.item.id;\n                  return id;\n                });\n\n              case 3:\n                results = _context.sent;\n                return _context.abrupt(\"return\", resolve(results));\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", reject(_context.t0));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\r\n   * @function\r\n   * @name getURLParams\r\n   * @param {string} request \r\n   * @returns {string} returns payload \r\n   * This function is a manually created querystring function\r\n   * takes the uri of the window, creates a URL object out of it\r\n   * Then takes the url and searches it for the request (i.e. an accesstokoen) and returns the request payload\r\n   * \r\n   * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n   */\n\n\n  function getURLParams(req) {\n    var uri = window.location.href;\n    var url = new URL(uri);\n    var res = url.searchParams.get(req);\n    return res;\n  }\n  /**\r\n   * @function\r\n   * @name getAudioFeatures\r\n   * @param {string} id - The ID of the currently playing song\r\n   * @param {string} access_token - The user access token generated from the OAuth Methond\r\n   * @returns {JSON}  returns a json object with the audio features of the currently playing song\r\n   *\r\n   * <code>getAudioFeatures</code> is also an async function returning a promise\r\n   * In this case, it takes the id and access token and returns the appropriate song audio analysis for the specific id requested\r\n   * \r\n   * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n   */\n\n\n  function getAudioFeatures(id, access_token) {\n    return new Promise(\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(resolve, reject) {\n        var fetchURL, results;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                fetchURL = 'https://api.spotify.com/v1/audio-features/' + id;\n                console.log(fetchURL);\n                _context2.next = 5;\n                return fetch(fetchURL, {\n                  headers: {\n                    \"Authorization\": \"Bearer \" + access_token\n                  }\n                }).then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  var audioAnalysis = [];\n                  audioAnalysis.push({\n                    \"BPM\": data.tempo,\n                    \"danceability\": data.danceability\n                  });\n                  return audioAnalysis;\n                });\n\n              case 5:\n                results = _context2.sent;\n                return _context2.abrupt(\"return\", resolve(results));\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", reject(_context2.t0));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  /**\r\n   * @function\r\n   * @name doEverything\r\n   * @returns {async_runtime} \r\n   * \r\n   * The async function <code>doEverything</code> just runs all of my previous functions but in async time\r\n   * Running said functions using an <code>await</code> parameter before calling the function ensures that the function is fully executed\r\n   * and resolved with a returned value before inserting it into a variable \r\n   * \r\n   * This avoids what is aptly described as \"async callback hell\" where undefined values (which are returned because the function is still resolving)\r\n   * destroy runtime speeds and RAM utilization\r\n   * \r\n   * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n   */\n\n\n  function doEverything() {\n    return _doEverything.apply(this, arguments);\n  } //need to limit rates so i don't make 60 api calls per second\n\n\n  function _doEverything() {\n    _doEverything = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var access_token, id, audioAnalysis;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getURLParams(\"access_token\");\n\n            case 2:\n              access_token = _context3.sent;\n              _context3.next = 5;\n              return fetchData(access_token);\n\n            case 5:\n              id = _context3.sent;\n              _context3.next = 8;\n              return getAudioFeatures(id, access_token);\n\n            case 8:\n              audioAnalysis = _context3.sent;\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    return _doEverything.apply(this, arguments);\n  }\n\n  var rate = 0;\n  var test = []; //JSON array for song animation values\n\n  var diameter;\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\n    p.colorMode(p.HSB, 360, 100, 100);\n    p.noStroke();\n    p.ellipseMode(p.RADIUS);\n    p.frameRate(600);\n  };\n  /**\r\n   * draw function should take the audio analysis\r\n   * on every half beat (tatum) change circle radius\r\n   * have like a mild gradient from last radius to current radius \r\n   * change circle colour every beat\r\n   * change size according to volume\r\n   * beat circle to tempo from API\r\n   */\n\n\n  p.draw = function () {\n    if (rate % 120 === 0) {\n      p.getSongID();\n    }\n\n    p.clear();\n    console.log(test);\n    var r = p.millis() / (1000 / (test[0] / 60.0));\n    r -= p.int(r);\n    diameter = p.map(r, 0, 2.5, 400, 0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\n    // console.log(diameter)\n    // *slightly* slow down the seizure-inducing radial gradient effects\n\n    for (var i = 0; i < 7; i++) {\n      if (test[2] == true) {\n        p.drawGradient(p.windowWidth / 2, p.windowHeight / 2);\n      }\n    }\n\n    rate++;\n  };\n\n  p.getR = function (props) {\n    return props.tempo;\n  };\n\n  p.getDanceability = function (props) {\n    return props.danceability;\n  }; //makes it look like a speaker driver bouncing around in a weird way\n\n\n  p.drawGradient = function (x, y) {\n    var radius = diameter / 2;\n    var randColor = p.random(0, 360);\n\n    for (var r = radius; r > 0; --r) {\n      p.fill(200, randColor, 120); //blue\n\n      p.ellipse(x, y, r, r);\n      randColor = (randColor + 1) % 69; //tried random numbers until it looked good\n    }\n  };\n\n  p.getAccessToken = function () {\n    var uri = window.location.href;\n    var url = new URL(uri);\n    var res = url.searchParams.get(\"access_token\");\n    return res;\n  };\n\n  p.getSongID = function () {\n    var res = p.getAccessToken();\n    return p.loadJSON(\"https://api.spotify.com/v1/me/player?access_token=\" + res, p.getAudioFeatures);\n  };\n\n  p.getAudioFeatures = function (data) {\n    var res = p.getAccessToken();\n    console.log(data);\n    var id = data.item.id;\n    var isPlaying = data.is_playing;\n    test[2] = isPlaying;\n    var audioFeatures = p.loadJSON(\"https://api.spotify.com/v1/audio-features/\" + id + '?access_token=' + res, p.resolveAnalysis);\n    console.log(audioFeatures);\n  };\n\n  p.resolveAnalysis = function (data) {\n    var tempo = data.tempo;\n    var danceability = data.danceability;\n    test[0] = tempo;\n    test[1] = danceability;\n  };\n}","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\js\\sketch.js"],"names":["sketch","p","fetchData","accessToken","Promise","resolve","reject","fetch","headers","then","response","json","data","id","item","results","getURLParams","req","uri","window","location","href","url","URL","res","searchParams","get","getAudioFeatures","access_token","fetchURL","console","log","audioAnalysis","push","tempo","danceability","doEverything","rate","test","diameter","setup","createCanvas","windowWidth","windowHeight","P2D","colorMode","HSB","noStroke","ellipseMode","RADIUS","frameRate","draw","getSongID","clear","r","millis","int","map","i","drawGradient","getR","props","getDanceability","x","y","radius","randColor","random","fill","ellipse","getAccessToken","loadJSON","isPlaying","is_playing","audioFeatures","resolveAnalysis"],"mappings":"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","sourcesContent":["/**\r\n * @name P5Sketch\r\n * @returns a sketch script that <code>P5Wrapper.js</code> will run\r\n * \r\n */\r\n\r\nexport default function sketch(p) {\r\n\r\n    /**\r\n     * @name fetchData\r\n     * @param {string} accessToken Takes an <code>accessToken</code> as a parameter\r\n     * @returns {id} User's Currently Playing data from the Spotify API\r\n     * This function is using an asychronous operation\r\n     * a <code>promise</code> is made -> it can either be resolved or rejected\r\n     * If error (reject) then you <code>catch</code> the error and return it\r\n     * If the code within the try/catch is successful, then you return the id of the song currently playing\r\n     * \r\n     * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n     */\r\n    function fetchData(accessToken) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let results = await\r\n                fetch('https://api.spotify.com/v1/me/player', {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + accessToken\r\n                    }\r\n                }).then(response => response.json()).then(data => {\r\n                    let id = data.item.id\r\n                    return id;\r\n                })\r\n                return resolve(results);\r\n            } catch (e) {\r\n                return reject(e);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name getURLParams\r\n     * @param {string} request \r\n     * @returns {string} returns payload \r\n     * This function is a manually created querystring function\r\n     * takes the uri of the window, creates a URL object out of it\r\n     * Then takes the url and searches it for the request (i.e. an accesstokoen) and returns the request payload\r\n     * \r\n     * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n     */\r\n    function getURLParams(req) {\r\n        var uri = window.location.href;\r\n        var url = new URL(uri);\r\n        var res = url.searchParams.get(req);\r\n        return res\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name getAudioFeatures\r\n     * @param {string} id - The ID of the currently playing song\r\n     * @param {string} access_token - The user access token generated from the OAuth Methond\r\n     * @returns {JSON}  returns a json object with the audio features of the currently playing song\r\n     *\r\n     * <code>getAudioFeatures</code> is also an async function returning a promise\r\n     * In this case, it takes the id and access token and returns the appropriate song audio analysis for the specific id requested\r\n     * \r\n     * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n     */\r\n    function getAudioFeatures(id, access_token) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let fetchURL = 'https://api.spotify.com/v1/audio-features/' + id;\r\n                console.log(fetchURL);\r\n                let results = await\r\n                fetch(fetchURL, {\r\n                    headers: {\r\n                        \"Authorization\": \"Bearer \" + access_token\r\n                    }\r\n                }).then(response => response.json()).then(data => {\r\n                    let audioAnalysis = [];\r\n                    audioAnalysis.push({\r\n                        \"BPM\": data.tempo,\r\n                        \"danceability\": data.danceability\r\n                    })\r\n                    return audioAnalysis;\r\n                })\r\n                return resolve(results)\r\n            } catch (e) {\r\n                return reject(e);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name doEverything\r\n     * @returns {async_runtime} \r\n     * \r\n     * The async function <code>doEverything</code> just runs all of my previous functions but in async time\r\n     * Running said functions using an <code>await</code> parameter before calling the function ensures that the function is fully executed\r\n     * and resolved with a returned value before inserting it into a variable \r\n     * \r\n     * This avoids what is aptly described as \"async callback hell\" where undefined values (which are returned because the function is still resolving)\r\n     * destroy runtime speeds and RAM utilization\r\n     * \r\n     * NOTE: all of my async functions are now not in use since P5 doesn't particularly like being called in async time from an external source\r\n     */\r\n    async function doEverything() {\r\n        const access_token = await getURLParams(\"access_token\");\r\n        const id = await fetchData(access_token);\r\n        const audioAnalysis = await getAudioFeatures(id, access_token);\r\n    }\r\n\r\n\r\n\r\n    //need to limit rates so i don't make 60 api calls per second\r\n    let rate = 0;\r\n    let test = []\r\n\r\n    //JSON array for song animation values\r\n    var diameter;\r\n    p.setup = function () {\r\n        p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\r\n        p.colorMode(p.HSB, 360, 100, 100);\r\n        p.noStroke();\r\n        p.ellipseMode(p.RADIUS);\r\n        p.frameRate(600);\r\n    }\r\n\r\n\r\n    /**\r\n     * draw function should take the audio analysis\r\n     * on every half beat (tatum) change circle radius\r\n     * have like a mild gradient from last radius to current radius \r\n     * change circle colour every beat\r\n     * change size according to volume\r\n     * beat circle to tempo from API\r\n     */\r\n    p.draw = function () {\r\n        if ((rate % 120) === 0) {\r\n            p.getSongID()\r\n        }\r\n        p.clear();\r\n        console.log(test)\r\n        var r = p.millis() / (1000 / (test[0] / 60.0));\r\n        r -= p.int(r);\r\n        diameter = p.map(r, 0, 2.5, 400, 0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\r\n        // console.log(diameter)\r\n        // *slightly* slow down the seizure-inducing radial gradient effects\r\n        for (var i = 0; i < 7; i++) {\r\n            if(test[2] == true) {\r\n            p.drawGradient(p.windowWidth / 2, p.windowHeight / 2)\r\n            }\r\n        }\r\n        rate++;\r\n    }\r\n\r\n    p.getR = function (props) {\r\n        return props.tempo\r\n    }\r\n\r\n    p.getDanceability = function (props) {\r\n        return props.danceability\r\n    }\r\n\r\n    //makes it look like a speaker driver bouncing around in a weird way\r\n    p.drawGradient = function (x, y) {\r\n        var radius = diameter / 2;\r\n        var randColor = p.random(0, 360);\r\n        for (var r = radius; r > 0; --r) {\r\n            p.fill(200, randColor, 120); //blue\r\n            p.ellipse(x, y, r, r);\r\n            randColor = (randColor + 1) % 69; //tried random numbers until it looked good\r\n        }\r\n    }\r\n\r\n    p.getAccessToken = function () {\r\n        var uri = window.location.href;\r\n        var url = new URL(uri);\r\n        var res = url.searchParams.get(\"access_token\");\r\n        return res\r\n    }\r\n    p.getSongID = function () {\r\n        var res = p.getAccessToken()\r\n        return p.loadJSON(\"https://api.spotify.com/v1/me/player?access_token=\" + res, p.getAudioFeatures);\r\n\r\n    }\r\n\r\n    p.getAudioFeatures = function (data) {\r\n        var res = p.getAccessToken()\r\n        console.log(data)\r\n        var id = data.item.id\r\n        var isPlaying = data.is_playing\r\n        test[2] = isPlaying\r\n        var audioFeatures = p.loadJSON(\"https://api.spotify.com/v1/audio-features/\" + id + '?access_token=' + res, p.resolveAnalysis)\r\n        console.log(audioFeatures)\r\n    }\r\n\r\n    p.resolveAnalysis = function(data) {\r\n        var tempo = data.tempo;\r\n        var danceability = data.danceability;\r\n        test[0] = tempo\r\n        test[1] = danceability\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}