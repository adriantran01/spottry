{"ast":null,"code":"import _classCallCheck from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\src\\\\views\\\\Home.js\";\n\n/**\r\n * Creating a home page, that should be fully static (pending state changes to the callback and login uris)\r\n * Just using another view page to implement within a router in App.js\r\n */\nimport React, { Component } from 'react';\nimport './css/Home.css'; //import css for this web page\n\nimport queryString from 'query-string'; //import queryString to take params from uri\n\nimport { Line } from 'rc-progress'; //progress bar import\n\nrequire('dotenv').config();\n/**\r\n * This function takes a Spotify User Access Token (which is generated automatically via the OAuth flow) and then creates an API call to Spotify's Connect API to get the user's playback state\r\n * @name getUserPlaybackState\r\n * @param {string} input takes an access token\r\n * @returns {JSON} returns a JSON object of the user's playback state\r\n */\n\n/**\r\n * SongTitle just passes the properties given to it by the Player main component and displays it\r\n */\n\n\nvar SongTitle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SongTitle, _Component);\n\n  function SongTitle() {\n    _classCallCheck(this, SongTitle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SongTitle).apply(this, arguments));\n  }\n\n  _createClass(SongTitle, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"song col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"album-image-div col-sm-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"album_img\",\n        src: this.props.albumImage,\n        alt: \"album image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"title-div col-sm-9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"song-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, this.props.songName), React.createElement(\"h3\", {\n        className: \"artist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.props.artist), React.createElement(Line, {\n        id: \"progress\",\n        percent: this.props.progress,\n        strokeWidth: \"1.5\",\n        trailWidth: \"1.5\",\n        strokeColor: \"#FFFFFF\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SongTitle;\n}(Component);\n/**\r\n * this local class \"Title\" just takes a small button containing div, and the button itself to turn it \r\n * into a component usable within my main Home component\r\n */\n\n\nvar Title =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Title, _Component2);\n\n  function Title() {\n    _classCallCheck(this, Title);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Title).apply(this, arguments));\n  }\n\n  _createClass(Title, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"title col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        id: \"start-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \" Spotify Music Visualizer \"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \" Connect Your Spotify Account to Continue \"));\n    }\n  }]);\n\n  return Title;\n}(Component);\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(Button, _Component3);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"get_started col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"start_btn btn-sm btn-success\",\n        href: \"http://localhost:8888/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Connect To Spotify\"));\n    }\n  }]);\n\n  return Button;\n}(Component);\n/** Brief Explanation about what's happening here\r\n* <ol>\r\n* <li> I use a constructor to set a state for the data I will be accessing later. React requires that I call\r\n* a super inside my constructor before calling \"this\" onto itself\r\n* </li> <br>\r\n* \r\n* <li> componentDidMount() is a function that activates when the components are first rendered, then you set\r\n* the state of the component to the data you want\r\n* </li> <br>\r\n*\r\n* <li> Within my render, you will see <code>{this.state.serverData}</code> which renders into text, the && just checks if the data\r\n* exists or is undefined/null, then you render the data into it. (Truthy/falsy within JS)\r\n* </li> <br>\r\n*\r\n* <li>Wrapping my components within objects and then calling a boolean method upon them prevents them from rendering\r\n* if there has not yet been data provided via the API endpoint\r\n* </li> <br>\r\n* \r\n* <li> Truthy/falsy logic then renders (redirects) user to the <code>login</code> screen if there is no server data available (i.e. they aren't logged in)\r\n* </ol>\r\n*/\n\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(Home, _Component4);\n\n  _createClass(Home, [{\n    key: \"fetchData\",\n    value: function fetchData(accessToken) {\n      var _this2 = this;\n\n      fetch('https://api.spotify.com/v1/me/player', {\n        headers: {\n          'Authorization': 'Bearer ' + accessToken\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this2.setState({\n          song: {\n            song_name: data.item.name,\n            artist: data.item.artists[0].name,\n            time: data.progress_ms * 100 / data.item.duration_ms,\n            //convert times in ms to progress in %\n            duration: data.item.duration_ms,\n            album_url: data.item.album.images[0].url\n          }\n        });\n\n        console.log(_this2.state);\n        console.log(_this2.state.song);\n      });\n    }\n  }, {\n    key: \"getNewToken\",\n    value: function getNewToken(refreshToken) {\n      fetch('https://api.spotify.com/api/token', {\n        method: \"POST\",\n        mode: \"cors\",\n        body: {\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        },\n        headers: {\n          'Accept': 'application/json',\n          \"Content-Type\": 'application/x-www-form-urlencoded',\n          \"Authorization\": 'Basic ' + btoa(process.env.CLIENT_ID + ':' + process.env.SECRET)\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(\"refresh\" + data);\n      });\n    }\n  }]);\n\n  function Home() {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this));\n    _this.state = {\n      serverData: {}\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      /**\r\n       * @name parsedToken\r\n       * @param {string} window.location.search\r\n       * @returns {string} a formmated query string (access token)\r\n       * \r\n       * takes the returned access token an user gives from the auth flow and returns an access token (completely parsed and encoded)\r\n       */\n      var parsed = queryString.parse(window.location.search);\n      console.log(parsed);\n      var accessToken = parsed.access_token;\n      console.log(accessToken);\n      var refreshToken = parsed.refresh_token;\n      console.log(refreshToken);\n      /**\r\n       * @name fetchData\r\n       * @param {string} input\r\n       * @returns a JSON array/file of data, the fetch function itself returns a promise, which can be asynchronous\r\n       * \r\n       * the header includes the <code>access token</code> which was fetched earlier in the <code>queryString.parse</code>\r\n       * after you fetch the data, asynchronously return a promise and make use of the responose within another state\r\n       */\n\n      if (accessToken) {\n        this.fetchData(accessToken);\n        this.state = setInterval(function () {\n          return _this3.fetchData(accessToken);\n        }, 800);\n\n        try {\n          //trying to get a new access token after an hour using the refresh token, returns a 400 error, will try later\n          this.getNewToken(refreshToken);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"contain col-sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, this.state.song ? //if serverData.song exists render the div below, else jump to the colon and render that\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(SongTitle, {\n        songName: this.state.song.song_name,\n        artist: this.state.song.artist,\n        albumImage: this.state.song.album_url,\n        progress: this.state.song.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })) : //if the user has not authenticated and the server does not have data, redirect to beginning of auth flow\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport { Home as default };","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\Home.js"],"names":["React","Component","queryString","Line","require","config","SongTitle","props","albumImage","songName","artist","progress","Title","Button","Home","accessToken","fetch","headers","then","response","json","data","console","log","setState","song","song_name","item","name","artists","time","progress_ms","duration_ms","duration","album_url","album","images","url","state","refreshToken","method","mode","body","btoa","process","env","CLIENT_ID","SECRET","serverData","parsed","parse","window","location","search","access_token","refresh_token","fetchData","setInterval","getNewToken","e"],"mappings":"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","sourcesContent":["/**\r\n * Creating a home page, that should be fully static (pending state changes to the callback and login uris)\r\n * Just using another view page to implement within a router in App.js\r\n */\r\nimport React, { Component } from 'react';\r\nimport './css/Home.css'; //import css for this web page\r\nimport queryString from 'query-string'; //import queryString to take params from uri\r\nimport { Line } from 'rc-progress'; //progress bar import\r\nrequire('dotenv').config();\r\n\r\n/**\r\n * This function takes a Spotify User Access Token (which is generated automatically via the OAuth flow) and then creates an API call to Spotify's Connect API to get the user's playback state\r\n * @name getUserPlaybackState\r\n * @param {string} input takes an access token\r\n * @returns {JSON} returns a JSON object of the user's playback state\r\n */\r\n\r\n\r\n\r\n/**\r\n * SongTitle just passes the properties given to it by the Player main component and displays it\r\n */\r\nclass SongTitle extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"song col-sm-12\">\r\n                <div className=\"album-image-div col-sm-3\" >\r\n                    <img className=\"album_img\" src={this.props.albumImage} alt=\"album image\"></img>\r\n                </div>\r\n                <div className=\"title-div col-sm-9\">\r\n                    <h1 className=\"song-title\">\r\n                        {this.props.songName}\r\n                    </h1>\r\n                \r\n\r\n                    <h3 className=\"artist\">\r\n                        {this.props.artist}\r\n                    </h3>\r\n\r\n                    <Line id=\"progress\" percent={this.props.progress} strokeWidth = \"1.5\" trailWidth=\"1.5\" strokeColor=\"#FFFFFF\" />\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * this local class \"Title\" just takes a small button containing div, and the button itself to turn it \r\n * into a component usable within my main Home component\r\n */\r\nclass Title extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"title col-sm-12\">\r\n                <h1 id=\"start-title\"> Spotify Music Visualizer </h1>\r\n                <h4> Connect Your Spotify Account to Continue </h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Button extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"get_started col-sm-12\">\r\n                <a className=\"start_btn btn-sm btn-success\" href=\"http://localhost:8888/login\">Connect To Spotify</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/** Brief Explanation about what's happening here\r\n* <ol>\r\n* <li> I use a constructor to set a state for the data I will be accessing later. React requires that I call\r\n* a super inside my constructor before calling \"this\" onto itself\r\n* </li> <br>\r\n* \r\n* <li> componentDidMount() is a function that activates when the components are first rendered, then you set\r\n* the state of the component to the data you want\r\n* </li> <br>\r\n*\r\n* <li> Within my render, you will see <code>{this.state.serverData}</code> which renders into text, the && just checks if the data\r\n* exists or is undefined/null, then you render the data into it. (Truthy/falsy within JS)\r\n* </li> <br>\r\n*\r\n* <li>Wrapping my components within objects and then calling a boolean method upon them prevents them from rendering\r\n* if there has not yet been data provided via the API endpoint\r\n* </li> <br>\r\n* \r\n* <li> Truthy/falsy logic then renders (redirects) user to the <code>login</code> screen if there is no server data available (i.e. they aren't logged in)\r\n* </ol>\r\n*/\r\n\r\n\r\nexport default class Home extends Component {\r\n\r\n    fetchData(accessToken) {\r\n        fetch('https://api.spotify.com/v1/me/player', {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + accessToken}\r\n                    }).then(response => response.json()).then(data => {\r\n                            console.log(data);\r\n                            this.setState({\r\n                                song: {                    \r\n                                    song_name: data.item.name,\r\n                                    artist: data.item.artists[0].name,\r\n                                    time: (data.progress_ms*100)/data.item.duration_ms, //convert times in ms to progress in %\r\n                                    duration: data.item.duration_ms,\r\n                                    album_url: data.item.album.images[0].url\r\n                                }             \r\n                        });\r\n                        console.log(this.state);\r\n                        console.log(this.state.song);\r\n                    })\r\n        }\r\n\r\n    getNewToken(refreshToken) {\r\n        fetch('https://api.spotify.com/api/token', {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: {\r\n                'grant_type': 'refresh_token',\r\n                'refresh_token': refreshToken\r\n            },\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                \"Content-Type\": 'application/x-www-form-urlencoded',\r\n                \"Authorization\": 'Basic ' + btoa(process.env.CLIENT_ID + ':' + process.env.SECRET)\r\n            }\r\n        }).then(response => response.json())\r\n          .then(data => {\r\n              console.log(\"refresh\" + data);\r\n          })\r\n    }\r\n                  \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            serverData: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        /**\r\n         * @name parsedToken\r\n         * @param {string} window.location.search\r\n         * @returns {string} a formmated query string (access token)\r\n         * \r\n         * takes the returned access token an user gives from the auth flow and returns an access token (completely parsed and encoded)\r\n         */\r\n        let parsed = queryString.parse(window.location.search);\r\n        console.log(parsed);\r\n        let accessToken = parsed.access_token;\r\n        console.log(accessToken);\r\n        let refreshToken = parsed.refresh_token;\r\n        console.log(refreshToken);\r\n\r\n        /**\r\n         * @name fetchData\r\n         * @param {string} input\r\n         * @returns a JSON array/file of data, the fetch function itself returns a promise, which can be asynchronous\r\n         * \r\n         * the header includes the <code>access token</code> which was fetched earlier in the <code>queryString.parse</code>\r\n         * after you fetch the data, asynchronously return a promise and make use of the responose within another state\r\n         */\r\n        if(accessToken) {\r\n            this.fetchData(accessToken);\r\n            this.state = setInterval(() => this.fetchData(accessToken), 800);\r\n            try { //trying to get a new access token after an hour using the refresh token, returns a 400 error, will try later\r\n            this.getNewToken(refreshToken);\r\n            } catch(e) {\r\n                console.log(e);\r\n            }\r\n            } \r\n               \r\n}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contain col-sm-12\">\r\n\r\n            \r\n            {/* <P5Wrapper sketch={sketch} tempo={this.state.tempo} danceability = {this.state.danceability}/> */}\r\n            \r\n            {this.state.song ? //if serverData.song exists render the div below, else jump to the colon and render that\r\n            <div>\r\n                <SongTitle songName={ this.state.song.song_name }\r\n                           artist={ this.state.song.artist }\r\n                           albumImage={this.state.song.album_url}\r\n                           progress={ this.state.song.time }\r\n                                    /> \r\n                \r\n            </div> : //if the user has not authenticated and the server does not have data, redirect to beginning of auth flow\r\n            <div >\r\n                <Title/>\r\n                <Button/>\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}