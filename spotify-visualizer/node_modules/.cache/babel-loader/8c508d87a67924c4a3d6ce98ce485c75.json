{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\LZN\\\\Processing\\\\SpotifyVisualizerReact\\\\SpotifyVisualizerReact\\\\spotify-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nexport default function sketch(p) {\n  function fetchData(accessToken) {\n    var id;\n    fetch('https://api.spotify.com/v1/me/player', {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"data \" + data);\n      console.log(\"id \" + data.item.id);\n      id = data.item.id;\n    });\n    return id;\n  }\n\n  function getURLParams(req) {\n    var uri = window.location.href;\n    var url = new URL(uri);\n    var res = url.searchParams.get(req);\n    return res;\n  }\n\n  function getAudioFeatures(id, access_token) {\n    var audioAnalysis = [];\n    var apiURL = 'https://api.spotify.com/v1/audio-features/';\n    var song_id = id;\n    var fetchURL = apiURL.concat(song_id);\n    console.log(fetchURL);\n    fetch(fetchURL, {\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer\" + access_token\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      audioAnalysis.push({\n        \"BPM\": data.tempo,\n        \"danceability\": data.danceability\n      });\n    });\n    return audioAnalysis;\n  }\n\n  function doEverything() {\n    return _doEverything.apply(this, arguments);\n  }\n\n  function _doEverything() {\n    _doEverything = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var access_token, id, audioAnalysis;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getURLParams(\"access_token\");\n\n            case 2:\n              access_token = _context.sent;\n              _context.next = 5;\n              return fetchData(access_token).toString();\n\n            case 5:\n              id = _context.sent;\n              console.log(id);\n              _context.next = 9;\n              return getAudioFeatures(id, access_token);\n\n            case 9:\n              audioAnalysis = _context.sent;\n              return _context.abrupt(\"return\", audioAnalysis);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _doEverything.apply(this, arguments);\n  }\n\n  var audioAnalysis = doEverything();\n  console.log(audioAnalysis);\n  var diameter;\n  var test = {\n    \"BPM\": 100\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\n    p.colorMode(p.HSB, 360, 100, 100);\n    p.noStroke();\n    p.ellipseMode(p.RADIUS);\n    p.frameRate(600);\n  };\n  /**\r\n   * draw function should take the audio analysis\r\n   * on every half beat (tatum) change circle radius\r\n   * have like a mild gradient from last radius to current radius \r\n   * change circle colour every beat\r\n   * change size according to volume\r\n   * beat circle to tempo from API\r\n   */\n\n\n  p.draw = function () {\n    p.clear();\n    var r = p.millis() / (1000 / (test.BPM / 60.0));\n    r -= p.int(r);\n    diameter = p.map(r, 0, 2.5, 400, 0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\n    // console.log(diameter)\n    // *slightly* slow down the seizure-inducing radial gradient effects\n\n    for (var i = 0; i < 7; i++) {\n      p.drawGradient(p.windowWidth / 2, p.windowHeight / 2);\n    }\n  };\n\n  p.getR = function (props) {\n    return props.tempo;\n  };\n\n  p.getDanceability = function (props) {\n    return props.danceability;\n  }; //makes it look like a speaker driver bouncing around in a weird way\n\n\n  p.drawGradient = function (x, y) {\n    var radius = diameter / 2;\n    var randColor = p.random(0, 360);\n\n    for (var r = radius; r > 0; --r) {\n      p.fill(200, randColor, 120); //blue\n\n      p.ellipse(x, y, r, r);\n      randColor = (randColor + 1) % 69; //tried random numbers until it looked good\n    }\n  };\n}","map":{"version":3,"sources":["D:\\LZN\\Processing\\SpotifyVisualizerReact\\SpotifyVisualizerReact\\spotify-visualizer\\src\\views\\js\\sketch.js"],"names":["sketch","p","fetchData","accessToken","id","fetch","headers","then","response","json","data","console","log","item","getURLParams","req","uri","window","location","href","url","URL","res","searchParams","get","getAudioFeatures","access_token","audioAnalysis","apiURL","song_id","fetchURL","concat","push","tempo","danceability","doEverything","toString","diameter","test","setup","createCanvas","windowWidth","windowHeight","P2D","colorMode","HSB","noStroke","ellipseMode","RADIUS","frameRate","draw","clear","r","millis","BPM","int","map","i","drawGradient","getR","props","getDanceability","x","y","radius","randColor","random","fill","ellipse"],"mappings":"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","sourcesContent":["export default function sketch(p) {\r\n\r\n    function fetchData(accessToken) {\r\n        let id;\r\n        fetch('https://api.spotify.com/v1/me/player', {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + accessToken}\r\n                    }).then(response => response.json()).then(data => {\r\n                            console.log(\"data \" + data);\r\n                            console.log(\"id \" + data.item.id)\r\n                            id = data.item.id\r\n                    })\r\n                    return id;\r\n        }    \r\n\r\n    function getURLParams(req) {\r\n        var uri = window.location.href;\r\n        var url = new URL(uri);\r\n        var res = url.searchParams.get(req);\r\n        return res\r\n    }\r\n\r\nfunction getAudioFeatures(id, access_token) {\r\n    let audioAnalysis = [];\r\n    let apiURL = 'https://api.spotify.com/v1/audio-features/'\r\n    let song_id = id;\r\n    let fetchURL = apiURL.concat(song_id);\r\n    console.log(fetchURL);\r\n    fetch(fetchURL, {\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer\" + access_token}\r\n        }).then(response => response.json()).then(data => {\r\n            audioAnalysis.push({\r\n                \"BPM\": data.tempo,\r\n                \"danceability\": data.danceability\r\n            })\r\n        })\r\n        return audioAnalysis;\r\n    }\r\n\r\nasync function doEverything() {\r\n    let access_token = await getURLParams(\"access_token\");\r\n    let id = await fetchData(access_token).toString();\r\n    console.log(id);\r\n    let audioAnalysis = await getAudioFeatures(id, access_token);\r\n    return audioAnalysis;\r\n}\r\n\r\nvar audioAnalysis = doEverything();\r\nconsole.log(audioAnalysis);\r\n\r\nvar diameter;\r\n\r\nconst test = {\r\n    \"BPM\": 100,\r\n}\r\n\r\np.setup = function() {\r\n    p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\r\n    p.colorMode(p.HSB, 360, 100, 100);\r\n    p.noStroke();\r\n    p.ellipseMode(p.RADIUS);\r\n    p.frameRate(600);\r\n}\r\n\r\n\r\n/**\r\n * draw function should take the audio analysis\r\n * on every half beat (tatum) change circle radius\r\n * have like a mild gradient from last radius to current radius \r\n * change circle colour every beat\r\n * change size according to volume\r\n * beat circle to tempo from API\r\n */\r\np.draw = function() {\r\n    p.clear();\r\n    var r = p.millis() / (1000 / (test.BPM / 60.0));\r\n    r -= p.int(r);\r\n    diameter = p.map(r,0,2.5,400,0); //map the bpm to diameter, and then change diameter each frame to increase/decrease based on tatums\r\n    // console.log(diameter)\r\n    // *slightly* slow down the seizure-inducing radial gradient effects\r\n    for (var i = 0; i < 7; i++) {\r\n        p.drawGradient(p.windowWidth/2, p.windowHeight/2)    \r\n    }\r\n}\r\n\r\np.getR = function(props) {\r\n    return props.tempo\r\n}\r\n\r\np.getDanceability = function(props) {\r\n    return props.danceability\r\n}\r\n\r\n//makes it look like a speaker driver bouncing around in a weird way\r\np.drawGradient = function(x, y) {\r\n    var radius = diameter / 2;\r\n    var randColor = p.random(0, 360);\r\n    for (var r = radius; r > 0; --r) {\r\n        p.fill(200, randColor, 120); //blue\r\n        p.ellipse(x, y, r, r);\r\n        randColor = (randColor + 1) % 69; //tried random numbers until it looked good\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}